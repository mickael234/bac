const mongoose = require("mongoose")
const bcrypt = require("bcryptjs")

// Connexion √† MongoDB
const MONGODB_URI = process.env.MONGODB_URI || "mongodb://localhost:27017/hr-management"

// Mod√®les (utilisant la m√™me structure que l'application)
const departmentSchema = new mongoose.Schema(
  {
    nom: { type: String, required: true, unique: true },
    description: String,
    manager: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
    membres: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
    dateCreation: { type: Date, default: Date.now },
  },
  { timestamps: true },
)

const userSchema = new mongoose.Schema(
  {
    firstName: String,
    lastName: String,
    email: { type: String, unique: true },
    password: String,
    role: { type: String, enum: ["admin", "manager", "employee"], default: "employee" },
    department: { type: mongoose.Schema.Types.ObjectId, ref: "Department" },
    position: String,
    phone: String,
    isActive: { type: Boolean, default: true },
  },
  { timestamps: true },
)

const jobOfferSchema = new mongoose.Schema(
  {
    title: String,
    description: String,
    requirements: [String],
    responsibilities: [String],
    benefits: [String],
    location: String,
    contractType: { type: String, enum: ["CDI", "CDD", "Stage", "Alternance", "Freelance"] },
    salary: {
      min: Number,
      max: Number,
      currency: { type: String, default: "EUR" },
      isVisible: Boolean,
    },
    department: { type: mongoose.Schema.Types.ObjectId, ref: "Department" },
    publicationDate: Date,
    closingDate: Date,
    isActive: Boolean,
    viewsCount: { type: Number, default: 0 },
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
  },
  { timestamps: true },
)

const applicationSchema = new mongoose.Schema(
  {
    jobOffer: { type: mongoose.Schema.Types.ObjectId, ref: "JobOffer" },
    firstName: String,
    lastName: String,
    email: String,
    phone: String,
    coverLetter: String,
    resume: {
      filename: String,
      path: String,
      originalname: String,
      mimetype: String,
    },
    portfolio: String,
    linkedin: String,
    github: String,
    status: {
      type: String,
      enum: ["received", "reviewing", "interview", "hired", "rejected"],
      default: "received",
    },
    rating: { type: Number, min: 0, max: 5, default: 0 },
    notes: [
      {
        content: String,
        createdBy: { type: mongoose.Schema.Types.ObjectId, ref: "User" },
        createdAt: { type: Date, default: Date.now },
      },
    ],
    interviews: [
      {
        date: Date,
        duration: Number,
        type: { type: String, enum: ["phone", "video", "inperson"], default: "inperson" },
        location: String,
        interviewers: [{ type: mongoose.Schema.Types.ObjectId, ref: "User" }],
        notes: String,
        status: {
          type: String,
          enum: ["scheduled", "completed", "cancelled", "rescheduled"],
          default: "scheduled",
        },
      },
    ],
  },
  { timestamps: true },
)

// Mod√®les
const Department = mongoose.model("Department", departmentSchema)
const User = mongoose.model("User", userSchema)
const JobOffer = mongoose.model("JobOffer", jobOfferSchema)
const Application = mongoose.model("Application", applicationSchema)

async function seedRecruitmentData() {
  try {
    console.log("üöÄ D√©but du seeding des donn√©es de recrutement...")

    // Connexion √† MongoDB
    await mongoose.connect(MONGODB_URI)
    console.log("‚úÖ Connexion √† MongoDB r√©ussie")

    // Nettoyage des donn√©es de test existantes
    console.log("üßπ Nettoyage des donn√©es de test existantes...")
    await Application.deleteMany({})
    await JobOffer.deleteMany({})
    await User.deleteMany({ email: { $regex: "@company.com$" } })

    // Supprimer seulement les d√©partements de test
    const testDepartments = ["Ressources Humaines", "Informatique", "Commercial", "Marketing", "Finance"]
    await Department.deleteMany({ nom: { $in: testDepartments } })
    console.log("‚úÖ Donn√©es de test nettoy√©es")

    // 1. Cr√©er des d√©partements
    console.log("üìÅ Cr√©ation des d√©partements...")
    const departments = await Department.insertMany([
      {
        nom: "Ressources Humaines",
        description: "Gestion du personnel et recrutement",
        dateCreation: new Date(),
      },
      {
        nom: "Informatique",
        description: "D√©veloppement et infrastructure IT",
        dateCreation: new Date(),
      },
      {
        nom: "Commercial",
        description: "Ventes et d√©veloppement commercial",
        dateCreation: new Date(),
      },
      {
        nom: "Marketing",
        description: "Communication et marketing digital",
        dateCreation: new Date(),
      },
      {
        nom: "Finance",
        description: "Comptabilit√© et gestion financi√®re",
        dateCreation: new Date(),
      },
    ])
    console.log(`‚úÖ ${departments.length} d√©partements cr√©√©s`)

    // 2. Cr√©er des utilisateurs (RH et managers)
    console.log("üë• Cr√©ation des utilisateurs...")
    const hashedPassword = await bcrypt.hash("password123", 10)

    const users = await User.insertMany([
      {
        firstName: "Marie",
        lastName: "Dubois",
        email: "marie.dubois@company.com",
        password: hashedPassword,
        role: "admin",
        department: departments[0]._id, // RH
        position: "Directrice RH",
        phone: "+33 1 23 45 67 89",
        isActive: true,
      },
      {
        firstName: "Pierre",
        lastName: "Martin",
        email: "pierre.martin@company.com",
        password: hashedPassword,
        role: "manager",
        department: departments[1]._id, // IT
        position: "Chef de projet IT",
        phone: "+33 1 23 45 67 90",
        isActive: true,
      },
      {
        firstName: "Sophie",
        lastName: "Bernard",
        email: "sophie.bernard@company.com",
        password: hashedPassword,
        role: "manager",
        department: departments[2]._id, // Commercial
        position: "Directrice commerciale",
        phone: "+33 1 23 45 67 91",
        isActive: true,
      },
      {
        firstName: "Thomas",
        lastName: "Petit",
        email: "thomas.petit@company.com",
        password: hashedPassword,
        role: "manager",
        department: departments[3]._id, // Marketing
        position: "Responsable marketing",
        phone: "+33 1 23 45 67 92",
        isActive: true,
      },
      {
        firstName: "Julie",
        lastName: "Moreau",
        email: "julie.moreau@company.com",
        password: hashedPassword,
        role: "employee",
        department: departments[0]._id, // RH
        position: "Charg√©e de recrutement",
        phone: "+33 1 23 45 67 93",
        isActive: true,
      },
    ])
    console.log(`‚úÖ ${users.length} utilisateurs cr√©√©s`)

    // 3. Cr√©er des offres d'emploi
    console.log("üíº Cr√©ation des offres d'emploi...")
    const now = new Date()
    const futureDate = new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000) // +30 jours
    const pastDate = new Date(now.getTime() - 10 * 24 * 60 * 60 * 1000) // -10 jours

    const jobOffers = await JobOffer.insertMany([
      {
        title: "D√©veloppeur Full Stack Senior",
        description:
          "Nous recherchons un d√©veloppeur full stack exp√©riment√© pour rejoindre notre √©quipe technique dynamique. Vous travaillerez sur des projets innovants utilisant les derni√®res technologies.",
        requirements: [
          "Minimum 5 ans d'exp√©rience en d√©veloppement web",
          "Ma√Ætrise de React, Node.js, MongoDB",
          "Connaissance des m√©thodologies Agile",
          "Anglais technique requis",
        ],
        responsibilities: [
          "D√©velopper et maintenir des applications web",
          "Participer √† la conception technique",
          "Encadrer les d√©veloppeurs juniors",
          "Assurer la qualit√© du code",
        ],
        benefits: ["T√©l√©travail partiel (3j/semaine)", "Formation continue", "Mutuelle premium", "Tickets restaurant"],
        location: "Lyon",
        contractType: "CDI",
        salary: {
          min: 45000,
          max: 60000,
          currency: "EUR",
          isVisible: true,
        },
        department: departments[1]._id, // IT
        publicationDate: now,
        closingDate: futureDate,
        isActive: true,
        viewsCount: 156,
        createdBy: users[1]._id, // Pierre Martin
      },
      {
        title: "Chef de Projet Marketing Digital",
        description:
          "Rejoignez notre √©quipe marketing pour piloter nos campagnes digitales et d√©velopper notre pr√©sence en ligne.",
        requirements: [
          "3-5 ans d'exp√©rience en marketing digital",
          "Ma√Ætrise des outils Google Ads, Facebook Ads",
          "Connaissance du SEO/SEA",
          "Esprit analytique",
        ],
        responsibilities: [
          "G√©rer les campagnes publicitaires digitales",
          "Analyser les performances marketing",
          "Coordonner avec les √©quipes cr√©atives",
          "Optimiser le ROI des campagnes",
        ],
        benefits: ["Primes sur objectifs", "Formation certifiante", "Environnement cr√©atif", "√âv√©nements d'√©quipe"],
        location: "Bordeaux",
        contractType: "CDI",
        salary: {
          min: 35000,
          max: 45000,
          currency: "EUR",
          isVisible: true,
        },
        department: departments[3]._id, // Marketing
        publicationDate: now,
        closingDate: futureDate,
        isActive: true,
        viewsCount: 89,
        createdBy: users[3]._id, // Thomas Petit
      },
      {
        title: "Stagiaire D√©veloppeur Web",
        description: "Stage de 6 mois pour d√©couvrir le d√©veloppement web dans une √©quipe bienveillante.",
        requirements: [
          "√âtudiant en informatique (Bac+3/4)",
          "Bases en HTML, CSS, JavaScript",
          "Motivation et curiosit√©",
          "Premi√®re exp√©rience appr√©ci√©e",
        ],
        responsibilities: [
          "Participer au d√©veloppement d'applications",
          "Apprendre les bonnes pratiques",
          "Contribuer aux projets d'√©quipe",
          "Documenter le code",
        ],
        benefits: [
          "Encadrement personnalis√©",
          "Formation technique",
          "Possibilit√© d'embauche",
          "Environnement moderne",
        ],
        location: "Lyon",
        contractType: "Stage",
        salary: {
          min: 600,
          max: 800,
          currency: "EUR",
          isVisible: true,
        },
        department: departments[1]._id, // IT
        publicationDate: now,
        closingDate: futureDate,
        isActive: true,
        viewsCount: 234,
        createdBy: users[1]._id, // Pierre Martin
      },
      {
        title: "Commercial B2B Senior",
        description: "D√©veloppez notre portefeuille client entreprise et atteignez vos objectifs ambitieux.",
        requirements: [
          "Minimum 5 ans d'exp√©rience en vente B2B",
          "Excellent relationnel",
          "Ma√Ætrise des outils CRM",
          "Permis B obligatoire",
        ],
        responsibilities: [
          "Prospecter de nouveaux clients",
          "N√©gocier les contrats",
          "Fid√©liser le portefeuille existant",
          "Atteindre les objectifs de vente",
        ],
        benefits: ["Commissions attractives", "Voiture de fonction", "T√©l√©phone professionnel", "√âvolution rapide"],
        location: "Marseille",
        contractType: "CDI",
        salary: {
          min: 40000,
          max: 70000,
          currency: "EUR",
          isVisible: false,
        },
        department: departments[2]._id, // Commercial
        publicationDate: now,
        closingDate: futureDate,
        isActive: true,
        viewsCount: 67,
        createdBy: users[2]._id, // Sophie Bernard
      },
      {
        title: "Comptable Senior",
        description: "Poste en CDD pour remplacement cong√© maternit√©. Rejoignez notre √©quipe finance.",
        requirements: [
          "Dipl√¥me en comptabilit√©/finance",
          "3+ ans d'exp√©rience",
          "Ma√Ætrise des logiciels comptables",
          "Rigueur et autonomie",
        ],
        responsibilities: [
          "Tenir la comptabilit√© g√©n√©rale",
          "Pr√©parer les d√©clarations fiscales",
          "Analyser les √©carts budg√©taires",
          "Assister aux cl√¥tures mensuelles",
        ],
        benefits: ["Horaires flexibles", "√âquipe exp√©riment√©e", "Formation continue", "Possibilit√© de CDI"],
        location: "Lille",
        contractType: "CDD",
        salary: {
          min: 32000,
          max: 38000,
          currency: "EUR",
          isVisible: true,
        },
        department: departments[4]._id, // Finance
        publicationDate: pastDate,
        closingDate: pastDate, // Offre expir√©e
        isActive: false,
        viewsCount: 45,
        createdBy: users[0]._id, // Marie Dubois
      },
      {
        title: "UX/UI Designer",
        description: "Cr√©ez des exp√©riences utilisateur exceptionnelles pour nos produits digitaux.",
        requirements: [
          "Portfolio d√©montrant vos comp√©tences",
          "Ma√Ætrise de Figma, Adobe Creative Suite",
          "2+ ans d'exp√©rience en UX/UI",
          "Sensibilit√© aux tendances design",
        ],
        responsibilities: [
          "Concevoir les interfaces utilisateur",
          "R√©aliser des tests utilisateurs",
          "Collaborer avec les d√©veloppeurs",
          "Maintenir le design system",
        ],
        benefits: ["Mat√©riel haut de gamme", "Libert√© cr√©ative", "Formations design", "√âquipe internationale"],
        location: "Paris",
        contractType: "CDI",
        salary: {
          min: 38000,
          max: 48000,
          currency: "EUR",
          isVisible: true,
        },
        department: departments[3]._id, // Marketing
        publicationDate: new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000), // Future
        closingDate: futureDate,
        isActive: true,
        viewsCount: 12,
        createdBy: users[3]._id, // Thomas Petit
      },
    ])
    console.log(`‚úÖ ${jobOffers.length} offres d'emploi cr√©√©es`)

    // 4. Cr√©er des candidatures
    console.log("üìù Cr√©ation des candidatures...")
    const applications = []

    // Candidatures pour le poste de D√©veloppeur Full Stack
    const devApplications = await Application.insertMany([
      {
        jobOffer: jobOffers[0]._id,
        firstName: "Alexandre",
        lastName: "Dupont",
        email: "alexandre.dupont@email.com",
        phone: "+33 6 12 34 56 78",
        coverLetter:
          "Passionn√© par le d√©veloppement web depuis plus de 6 ans, je souhaite rejoindre votre √©quipe pour contribuer √† vos projets innovants. Mon exp√©rience en React et Node.js me permettra d'√™tre op√©rationnel rapidement.",
        portfolio: "https://alexandre-dupont.dev",
        linkedin: "https://linkedin.com/in/alexandre-dupont",
        github: "https://github.com/alex-dupont",
        status: "interview",
        rating: 4,
        notes: [
          {
            content: "Excellent profil technique, exp√©rience solide en React",
            createdBy: users[1]._id,
            createdAt: new Date(now.getTime() - 2 * 24 * 60 * 60 * 1000),
          },
          {
            content: "Portfolio impressionnant, projets vari√©s et bien document√©s",
            createdBy: users[4]._id,
            createdAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000),
          },
        ],
        interviews: [
          {
            date: new Date(now.getTime() + 3 * 24 * 60 * 60 * 1000),
            duration: 90,
            type: "video",
            location: "Teams",
            interviewers: [users[1]._id],
            notes: "Entretien technique pr√©vu",
            status: "scheduled",
          },
        ],
      },
      {
        jobOffer: jobOffers[0]._id,
        firstName: "Camille",
        lastName: "Rousseau",
        email: "camille.rousseau@email.com",
        phone: "+33 6 23 45 67 89",
        coverLetter:
          "D√©veloppeuse full stack avec 4 ans d'exp√©rience, je recherche de nouveaux d√©fis techniques. Votre annonce correspond parfaitement √† mes aspirations professionnelles.",
        linkedin: "https://linkedin.com/in/camille-rousseau",
        github: "https://github.com/camille-dev",
        status: "reviewing",
        rating: 3,
        notes: [
          {
            content: "Profil int√©ressant mais manque d'exp√©rience en MongoDB",
            createdBy: users[1]._id,
            createdAt: new Date(now.getTime() - 1 * 24 * 60 * 60 * 1000),
          },
        ],
      },
      {
        jobOffer: jobOffers[0]._id,
        firstName: "Julien",
        lastName: "Moreau",
        email: "julien.moreau@email.com",
        phone: "+33 6 34 56 78 90",
        coverLetter:
          "Fort de mes 7 ans d'exp√©rience en d√©veloppement, je souhaite apporter mon expertise √† votre √©quipe et participer √† l'encadrement des d√©veloppeurs juniors.",
        portfolio: "https://julien-moreau.com",
        linkedin: "https://linkedin.com/in/julien-moreau-dev",
        status: "hired",
        rating: 5,
        notes: [
          {
            content: "Candidat exceptionnel, embauche recommand√©e",
            createdBy: users[1]._id,
            createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000),
          },
          {
            content: "Entretien excellent, tr√®s bonnes r√©f√©rences",
            createdBy: users[0]._id,
            createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000),
          },
        ],
        interviews: [
          {
            date: new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000),
            duration: 120,
            type: "inperson",
            location: "Bureau Lyon",
            interviewers: [users[1]._id, users[0]._id],
            notes: "Entretien tr√®s positif, candidat retenu",
            status: "completed",
          },
        ],
      },
    ])
    applications.push(...devApplications)

    // Candidatures pour le poste de Marketing Digital
    const marketingApplications = await Application.insertMany([
      {
        jobOffer: jobOffers[1]._id,
        firstName: "Emma",
        lastName: "Leroy",
        email: "emma.leroy@email.com",
        phone: "+33 6 45 67 89 01",
        coverLetter:
          "Sp√©cialis√©e en marketing digital depuis 4 ans, j'ai g√©r√© des budgets publicitaires importants et obtenu d'excellents ROI. Je souhaite mettre mon expertise au service de votre croissance.",
        linkedin: "https://linkedin.com/in/emma-leroy-marketing",
        status: "received",
        rating: 0,
      },
      {
        jobOffer: jobOffers[1]._id,
        firstName: "Lucas",
        lastName: "Girard",
        email: "lucas.girard@email.com",
        phone: "+33 6 56 78 90 12",
        coverLetter:
          "Passionn√© par le marketing digital et les nouvelles technologies, je souhaite rejoindre une √©quipe dynamique pour d√©velopper mes comp√©tences.",
        status: "rejected",
        rating: 2,
        notes: [
          {
            content: "Manque d'exp√©rience pour le poste senior",
            createdBy: users[3]._id,
            createdAt: new Date(now.getTime() - 3 * 24 * 60 * 60 * 1000),
          },
        ],
      },
    ])
    applications.push(...marketingApplications)

    // Candidatures pour le stage d√©veloppeur
    const stageApplications = await Application.insertMany([
      {
        jobOffer: jobOffers[2]._id,
        firstName: "L√©a",
        lastName: "Dubois",
        email: "lea.dubois@student.com",
        phone: "+33 6 67 78 90 23",
        coverLetter:
          "√âtudiante en 4√®me ann√©e d'informatique, je recherche un stage pour mettre en pratique mes connaissances th√©oriques et d√©couvrir le monde professionnel.",
        github: "https://github.com/lea-dubois",
        status: "interview",
        rating: 4,
        interviews: [
          {
            date: new Date(now.getTime() + 2 * 24 * 60 * 60 * 1000),
            duration: 60,
            type: "video",
            location: "Teams",
            interviewers: [users[1]._id, users[4]._id],
            status: "scheduled",
          },
        ],
      },
      {
        jobOffer: jobOffers[2]._id,
        firstName: "Hugo",
        lastName: "Martin",
        email: "hugo.martin@student.com",
        phone: "+33 6 78 90 12 34",
        coverLetter:
          "√âtudiant motiv√© en informatique, j'ai r√©alis√© plusieurs projets personnels et souhaite acqu√©rir une exp√©rience professionnelle enrichissante.",
        github: "https://github.com/hugo-martin",
        status: "reviewing",
        rating: 3,
      },
    ])
    applications.push(...stageApplications)

    // Candidatures pour le poste commercial
    const commercialApplications = await Application.insertMany([
      {
        jobOffer: jobOffers[3]._id,
        firstName: "Sarah",
        lastName: "Blanc",
        email: "sarah.blanc@email.com",
        phone: "+33 6 89 01 23 45",
        coverLetter:
          "Commerciale B2B exp√©riment√©e avec 6 ans d'exp√©rience, j'ai toujours d√©pass√© mes objectifs de vente. Je souhaite rejoindre votre √©quipe pour contribuer √† votre d√©veloppement.",
        linkedin: "https://linkedin.com/in/sarah-blanc-commercial",
        status: "interview",
        rating: 4,
        interviews: [
          {
            date: new Date(now.getTime() + 1 * 24 * 60 * 60 * 1000),
            duration: 90,
            type: "inperson",
            location: "Bureau Marseille",
            interviewers: [users[2]._id],
            status: "scheduled",
          },
        ],
      },
    ])
    applications.push(...commercialApplications)

    console.log(`‚úÖ ${applications.length} candidatures cr√©√©es`)

    // 5. Mettre √† jour les managers des d√©partements
    console.log("üëî Attribution des managers aux d√©partements...")
    await Department.findByIdAndUpdate(departments[0]._id, { manager: users[0]._id }) // Marie -> RH
    await Department.findByIdAndUpdate(departments[1]._id, { manager: users[1]._id }) // Pierre -> IT
    await Department.findByIdAndUpdate(departments[2]._id, { manager: users[2]._id }) // Sophie -> Commercial
    await Department.findByIdAndUpdate(departments[3]._id, { manager: users[3]._id }) // Thomas -> Marketing

    // 6. Statistiques finales
    console.log("\nüìä R√âSUM√â DES DONN√âES CR√â√âES:")
    console.log(`‚Ä¢ ${departments.length} d√©partements`)
    console.log(`‚Ä¢ ${users.length} utilisateurs`)
    console.log(`‚Ä¢ ${jobOffers.length} offres d'emploi`)
    console.log(`‚Ä¢ ${applications.length} candidatures`)

    console.log("\nüìà R√âPARTITION DES CANDIDATURES PAR STATUT:")
    const statusCounts = await Application.aggregate([
      { $group: { _id: "$status", count: { $sum: 1 } } },
      { $sort: { count: -1 } },
    ])
    statusCounts.forEach((stat) => {
      console.log(`‚Ä¢ ${stat._id}: ${stat.count} candidature(s)`)
    })

    console.log("\nüéØ OFFRES D'EMPLOI PAR STATUT:")
    const activeOffers = await JobOffer.countDocuments({ isActive: true, closingDate: { $gte: now } })
    const expiredOffers = await JobOffer.countDocuments({ closingDate: { $lt: now } })
    const futureOffers = await JobOffer.countDocuments({ publicationDate: { $gt: now } })
    console.log(`‚Ä¢ Actives: ${activeOffers}`)
    console.log(`‚Ä¢ Expir√©es: ${expiredOffers}`)
    console.log(`‚Ä¢ Programm√©es: ${futureOffers}`)

    console.log("\n‚úÖ Seeding termin√© avec succ√®s!")
    console.log("\nüîê COMPTES DE TEST CR√â√âS:")
    console.log("‚Ä¢ marie.dubois@company.com (Admin RH) - password: password123")
    console.log("‚Ä¢ pierre.martin@company.com (Manager IT) - password: password123")
    console.log("‚Ä¢ sophie.bernard@company.com (Manager Commercial) - password: password123")
    console.log("‚Ä¢ thomas.petit@company.com (Manager Marketing) - password: password123")
    console.log("‚Ä¢ julie.moreau@company.com (Charg√©e recrutement) - password: password123")

    console.log("\nüéØ PROCHAINES √âTAPES:")
    console.log("1. Connectez-vous avec un des comptes ci-dessus")
    console.log("2. Testez la cr√©ation d'offres d'emploi")
    console.log("3. Consultez les candidatures re√ßues")
    console.log("4. Planifiez des entretiens")
    console.log("5. Consultez les statistiques de recrutement")
  } catch (error) {
    console.error("‚ùå Erreur lors du seeding:", error)
  } finally {
    await mongoose.disconnect()
    console.log("üîå D√©connexion de MongoDB")
  }
}

// Ex√©cuter le script
seedRecruitmentData()
